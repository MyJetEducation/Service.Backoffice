@using Service.Backoffice.Blazor.Models
@using Service.Backoffice.Blazor.Services
@using Service.Core.Client.Extensions

@inject IEmailSenderOperationDataService _emailSenderOperationService

@if (_data is {ErrorText: {}})
{
    <div class="alert alert-danger" role="alert">
        @_data.ErrorText
    </div>
}

<div class="container">
    <button class="btn btn-primary" style="white-space: nowrap;" type="button" @onclick="Filter" disabled="@IsRefreshing">
        <span class="spinner-border spinner-border-sm" style="display: @(IsRefreshing ? "inline-block" : "none");" role="status" aria-hidden="true"></span>
        Refresh
    </button>
</div>

@if (_data != null && _data.ErrorText.IsNullOrEmpty())
{
    <div class="container max-width">
        <div class="card">
            <div class="card-body">
                <table class="table table-hover" style="width: 100%">
                    <thead class="thead-dark">
                    <tr>
                        <th width="10%">Date</th>
                        <th>Message</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (EmailSenderOperationDataParamValue paramValue in _data.Items)
                    {
                        <tr>
                            <td>
                                <pre>@paramValue.Param</pre>
                            </td>
                            <td>
                                <pre>@paramValue.Value</pre>
                                @{
                                    string url = paramValue.Url;
                                    if (url != null)
                                    {
                                        <p>
                                            <a href="@url" target="_blank">@url</a>
                                        </p>
                                    }
                                }
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}

@code {
    private EmailSenderOperationDataViewModel _data;
    private bool IsRefreshing { get; set; } = false;

    protected override Task OnInitializedAsync() => Filter();

    private async Task Filter()
    {
        IsRefreshing = true;
        _data = await _emailSenderOperationService.GetOperationData();
        IsRefreshing = false;
    }
}