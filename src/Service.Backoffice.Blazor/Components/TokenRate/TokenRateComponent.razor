@using Microsoft.AspNetCore.Components
@using Service.Backoffice.Blazor.Models
@using Service.Backoffice.Blazor.Services
@using Service.Core.Client.Extensions

@inject ITokenRateDataService _tokenRateDataService

@if (_data is {ErrorText: {}})
{
    <div class="alert alert-danger" role="alert">
        @_data.ErrorText
    </div>
}

@if (_data != null && _data.ErrorText.IsNullOrEmpty())
{
    <div class="container min-width">
        <div class="input-group mb-3">
            <div class="input-group-prepend">
                <span class="input-group-text" id="basic-addon3">Rate value</span>
            </div>
            <input type="text" class="form-control" id="rateValue" aria-describedby="basic-addon3" @bind="Value">
            <div class="input-group-append" id="button-addon4">
                <button class="btn btn-primary" style="float: right; white-space: nowrap;" type="button" @onclick="SaveValue" disabled="@IsSavingValue">
                    <span class="spinner-border spinner-border-sm" style="display: @(IsSavingValue ? "inline-block" : "none");" role="status" aria-hidden="true"></span>
                    Save
                </button>
                <button class="btn btn-primary" style="white-space: nowrap;" type="button" @onclick="GetValue" disabled="@IsRefreshing">
                    <span class="spinner-border spinner-border-sm" style="display: @(IsRefreshing ? "inline-block" : "none");" role="status" aria-hidden="true"></span>
                    Refresh
                </button>
            </div>
        </div>
    </div>
}

@code {
    private TokenRateDataViewModel _data;
    private decimal Value { get; set; }

    private bool IsSavingValue { get; set; } = false;
    private bool IsRefreshing { get; set; } = false;

    private async Task GetValue()
    {
        IsRefreshing = true;

        _data = await _tokenRateDataService.GetData();
        Value = _data.Value;

        IsRefreshing = false;
    }

    private async Task SaveValue()
    {
        IsSavingValue = true;

        _data = await _tokenRateDataService.SetData(Value);
        Value = _data.Value;

        IsSavingValue = false;
    }

    protected override Task OnInitializedAsync() => GetValue();
}