@using Service.Backoffice.Models
@using Service.Backoffice.Services
@using Service.Core.Client.Constants
@using Service.Core.Client.Extensions
@using Service.Education.Constants
@using Service.Education.Helpers
@using Service.Education.Structure
@using Service.EducationProgress.Domain.Models
@using Service.EducationProgress.Grpc.Models

@inject IEducationProgressDataService _educationProgressService
@inject IUserResolver _userResolver

@if (IsShowChangeTaskDateModal)
{
    <div class="modal fade show" id="myModal" style="display: block" aria-modal="true" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Change task date/time</h4>
                    <button type="button" class="close" @onclick="@ModalCancel">&times;</button>
                </div>
                <div class="modal-body">
                    <input type="datetime-local" class="form-control" id="dateValue" @bind="ChangeDate">
                </div>
                <div class="alert alert-danger" style="padding: 5px; display: @(ShowChangedError ? "block" : "none");" role="alert">
                    @ChangedError
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn" @onclick="@ModalCancel">Cancel</button>
                    <button class="btn btn-primary" style="float: right; white-space: nowrap;" type="button" @onclick="ModalOk" disabled="@IsChangingTaskDate">
                        <span class="spinner-border spinner-border-sm" style="display: @(IsChangingTaskDate ? "inline-block" : "none");" role="status" aria-hidden="true"></span>
                        OK
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<MudGrid Justify="Justify.FlexStart">
    <MudItem xs="5">
        <MudAutocomplete Dense="true" Label="User" Immediate="false" Clearable="true" MinCharacters="3" Variant="Variant.Outlined" ResetValueOnEmptyText="true" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary"
                         @ref="_userList"
                         T="ParamValue"
                         Value="@User"
                         SearchFunc="@GetUsers"
                         ValueChanged="@Filter"
                         ToStringFunc="@(pv => pv?.Value)"/>
    </MudItem>
    <MudItem xs="1">
        @if (IsRefreshing)
        {
            <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
        }
    </MudItem>
    @if (_data is {ErrorText: {}})
    {
        <MudItem xs="12">
            <MudAlert Severity="Severity.Error">@(_data.ErrorText)</MudAlert>
        </MudItem>
    }

    @if (_data != null && _data.ErrorText.IsNullOrEmpty())
    {
        <MudItem xs="6">
            <div class="card">
                <div class="card-header">
                    Reset progress
                </div>
                <div class="card-body">
                    <div class="form-check form-check-inline">
                        <input class="form-check-input" type="checkbox" id="inlineCheckbox1" value="progress" @bind="ClearProgress">
                        <label class="form-check-label" for="inlineCheckbox1">Progress</label>
                    </div>
                    <div class="form-check form-check-inline">
                        <input class="form-check-input" type="checkbox" id="inlineCheckbox2" value="progress" @bind="ClearUiProgress">
                        <label class="form-check-label" for="inlineCheckbox2">UI progress</label>
                    </div>
                    <br/>
                    <div class="form-check form-check-inline">
                        <input class="form-check-input" type="checkbox" id="inlineCheckbox3" value="achievements" @bind="ClearAchievements">
                        <label class="form-check-label" for="inlineCheckbox3">Achievements</label>
                    </div>
                    <div class="form-check form-check-inline">
                        <input class="form-check-input" type="checkbox" id="inlineCheckbox4" value="stats" @bind="ClearStatuses">
                        <label class="form-check-label" for="inlineCheckbox4">Statuses</label>
                    </div>
                    <div class="form-check form-check-inline">
                        <input class="form-check-input" type="checkbox" id="inlineCheckbox5" value="habits" @bind="ClearHabits">
                        <label class="form-check-label" for="inlineCheckbox5">Habits</label>
                    </div>
                    <div class="form-check form-check-inline">
                        <input class="form-check-input" type="checkbox" id="inlineCheckbox6" value="skills" @bind="ClearSkills">
                        <label class="form-check-label" for="inlineCheckbox6">Skills</label>
                    </div>
                    <div class="form-check form-check-inline">
                        <input class="form-check-input" type="checkbox" id="inlineCheckbox7" value="knowledge" @bind="ClearKnowledge">
                        <label class="form-check-label" for="inlineCheckbox7">Knowledge</label>
                    </div>
                    <br/>
                    <div class="form-check form-check-inline">
                        <input class="form-check-input" type="checkbox" id="inlineCheckbox8" value="knowledge" @bind="ClearUserTime">
                        <label class="form-check-label" for="inlineCheckbox8">Service time</label>
                    </div>
                    <br/>
                    <div class="form-check form-check-inline">
                        <input class="form-check-input" type="checkbox" id="inlineCheckbox9" value="knowledge" @bind="ClearRetry">
                        <label class="form-check-label" for="inlineCheckbox9">Retry info</label>
                    </div>
                    <button class="btn btn-primary" style="float: right; white-space: nowrap;" type="button" @onclick="ClearAll" disabled="@IsResettings">
                        <span class="spinner-border spinner-border-sm" style="display: @(IsResettings ? "inline-block" : "none");" role="status" aria-hidden="true"></span>
                        Reset
                    </button>
                </div>
            </div>
        </MudItem>

        <MudItem xs="12">
            <div class="card">
                <div class="card-header">
                    Progress
                    <span class="badge badge-secondary">test: @TestScore%</span>
                    <span class="badge badge-secondary">score: @TaskScore%</span>
                </div>
                <div class="card-body">

                    @{ IGrouping<EducationTutorial, EducationProgressTaskViewModel>[] tutorialInfo = _data.Items.GroupBy(itm => itm.Tutorial).OrderBy(itm => itm.Key).ToArray(); }
                    @{ int tasksCount = tutorialInfo.First().Count(g => g.Unit == 1);}

                    @foreach (IGrouping<EducationTutorial, EducationProgressTaskViewModel> tutorialGroups in tutorialInfo)
                    {
                        <table class="table table-bordered table-sm progress-table">
                            <thead class="thead-dark">

                            <tr>
                                <th class="progress-table-head-td">
                                    @Enum.GetName(tutorialGroups.Key)
                                    <span @onclick="@(_ => Clear(tutorialGroups.Key, null, null))" class="oi oi-x del-btn" aria-hidden="true"></span>
                                </th>

                                @for (var i = 1; i <= tasksCount; i++)
                                {
                                    <th class="progress-table-value-td">Task @i</th>
                                }
                            </tr>

                            </thead>
                            <tbody>

                            @{ IGrouping<int, EducationProgressTaskViewModel>[] unitGroups = tutorialGroups.GroupBy(g => g.Unit).OrderBy(grp => grp.Key).ToArray(); }

                            @foreach (IGrouping<int, EducationProgressTaskViewModel> unitGroup in unitGroups)
                            {
                                <tr>
                                    <td class="table-primary progress-table-head-td">
                                        Unit @unitGroup.Key
                                        <span @onclick="@(_ => Clear(tutorialGroups.Key, unitGroup.Key, null))" class="oi oi-x del-btn" aria-hidden="true"></span>
                                    </td>

                                    @{ EducationProgressTaskViewModel[] taskInfo = unitGroup.OrderBy(u => u.Task).ToArray();}

                                    @foreach (EducationProgressTaskViewModel task in taskInfo)
                                    {
                                        int? value = task.Value;
                                        var elseValue = "";
                                        string dateStr = null;

                                        int taskId = task.Task;
                                        EducationTutorial tutorialId = task.Tutorial;
                                        int unitId = task.Unit;
                                        DateTime? taskDate = task.Date;

                                        if (EducationHelper.GetTask(tutorialGroups.Key, unitGroup.Key, taskId).TaskType == EducationTaskType.Case
                                            && task.HasProgress
                                            && value != Progress.MaxProgress)
                                        {
                                            value = Progress.MaxProgress;
                                            elseValue = $" ({task.Value.ToString()})";
                                        }

                                        string tdclass = value switch {null => "",< Progress.OkProgress => "table-danger",_ => "table-success"};

                                        if (task.HasProgress)
                                            dateStr = $"{taskDate:dd/MM/yyyy h:mm}";

                                        <td class="@tdclass progress-table-value-td">
                                            @value@elseValue

                                            @if (task.HasProgress)
                                            {
                                                <span @onclick="@(_ => Clear(tutorialId, unitId, taskId))" class="oi oi-x del-btn" aria-hidden="true"></span>
                                            }

                                            @if (dateStr != null)
                                            {
                                                <div class="task-date" @onclick="@(_ => ModalShow(tutorialId, unitId, taskId, taskDate))">@dateStr</div>
                                            }
                                        </td>
                                    }

                                </tr>
                            }

                            </tbody>
                        </table>
                    }

                </div>
            </div>
        </MudItem>
    }
</MudGrid>

@code {
    private EducationProgressDataViewModel _data;
    private int TestScore { get; set; } = 0;
    private int TaskScore { get; set; } = 0;
    private ParamValue User { get; set; }
    private MudAutocomplete<ParamValue> _userList;

    private bool IsResettings { get; set; } = false;
    private bool IsRefreshing { get; set; } = false;

    private bool IsShowChangeTaskDateModal { get; set; } = false;
    private bool IsChangingTaskDate { get; set; } = false;
    private DateTime? ChangeDate { get; set; }
    private EducationTutorial ChangeTutorial { get; set; }
    private int ChangeUnit { get; set; }
    private int ChangeTask { get; set; }
    private string ChangedError { get; set; }
    private bool ShowChangedError { get; set; } = false;

    private bool ClearProgress { get; set; } = true;
    private bool ClearUiProgress { get; set; } = true;
    private bool ClearAchievements { get; set; }
    private bool ClearStatuses { get; set; }
    private bool ClearHabits { get; set; }
    private bool ClearSkills { get; set; }
    private bool ClearKnowledge { get; set; }
    private bool ClearUserTime { get; set; }
    private bool ClearRetry { get; set; }

    private async Task<IEnumerable<ParamValue>> GetUsers(string text) => text.IsNullOrWhiteSpace()
        ? Array.Empty<ParamValue>()
        : await _userResolver.GetUsers(text);

    private async Task Filter(ParamValue user)
    {
        User = user;

        if (_userList.IsOpen)
            await _userList.ToggleMenu();

        if (user == null)
        {
            _data = null;
            return;
        }

        IsRefreshing = true;

        _data = await _educationProgressService.GetProgress(user.Param);
        TestScore = _data.TestScore;
        TaskScore = _data.TaskScore;

        IsRefreshing = false;
    }

    private async Task Clear(EducationTutorial? tutorial, int? unit, int? task)
    {
        IsRefreshing = true;

        _data = await _educationProgressService.ClearProgress(User.Param, tutorial, unit, task);
        TestScore = _data.TestScore;
        TaskScore = _data.TaskScore;

        IsRefreshing = false;
    }

    private async Task ClearAll()
    {
        IsResettings = true;

        await _educationProgressService.ClearAll(User.Param, new ClearProgressFlags
        {
            Progress = ClearProgress,
            UiProgress = ClearUiProgress,
            Achievements = ClearAchievements,
            Statuses = ClearStatuses,
            Habits = ClearHabits,
            Skills = ClearSkills,
            Knowledge = ClearKnowledge,
            UserTime = ClearUserTime,
            Retry = ClearRetry
        });

        IsResettings = false;

        await Filter(User);
    }

    private void ModalShow(EducationTutorial tutorial, int unit, int task, DateTime? date)
    {
        ChangedError = null;
        ChangeTutorial = tutorial;
        ChangeUnit = unit;
        ChangeTask = task;
        ChangeDate = date;
        ShowChangedError = false;
        IsShowChangeTaskDateModal = true;
    }

    private void ModalCancel() => IsShowChangeTaskDateModal = false;

    private async void ModalOk()
    {
        IsChangingTaskDate = true;
        EducationProgressChangeDateDataViewModel saved = await _educationProgressService.ChangeTaskDate(User.Param, ChangeTutorial, ChangeUnit, ChangeTask, ChangeDate);
        IsChangingTaskDate = false;

        if (!saved.Result)
        {
            ChangedError = saved.ErrorMessage;
            ShowChangedError = true;
        }
        else
        {
            ModalCancel();
            await Filter(User);
        }

        StateHasChanged();
    }

}