@using Microsoft.AspNetCore.Components
@using Service.Backoffice.Models
@using Service.Backoffice.Services
@using Service.Core.Client.Extensions

@inject IRetryDataService _retryService
@inject IUserResolver _userResolver

<MudGrid Justify="Justify.FlexStart">
    <MudItem xs="5">
        <MudAutocomplete Dense="true" Label="User" Immediate="false" Clearable="true" MinCharacters="3" Variant="Variant.Outlined" ResetValueOnEmptyText="true" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary"
                         @ref="_userList"
                         T="ParamValue"
                         Value="@User"
                         SearchFunc="@GetUsers"
                         ValueChanged="@Filter"
                         ToStringFunc="@(pv => pv?.Value)" />
    </MudItem>
    <MudItem xs="1">
        @if (IsRefreshing)
        {
            <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
        }
    </MudItem>
    @if (_data is {ErrorText: {}})
    {
        <MudItem xs="12">
            <MudAlert Severity="Severity.Error">@(_data.ErrorText)</MudAlert>
        </MudItem>
    }
</MudGrid>

@if (_data != null && _data.ErrorText.IsNullOrEmpty())
{
    <MudGrid Justify="Justify.FlexStart">
        <MudItem xs="5">
            <div class="card">
                <div class="card-header">
                    Retry info
                </div>
                <div class="card-body">

                    <div class="input-group mb-3">
                        <div class="input-group-prepend">
                            <span class="input-group-text" id="basic-addon3">Retry count</span>
                        </div>
                        <input type="text" class="form-control" id="countValue" aria-describedby="basic-addon3" @bind="Count">
                        <div class="input-group-append" id="button-addon4">
                            <button class="btn btn-primary" style="float: right; white-space: nowrap;" type="button" @onclick="SaveCount" disabled="@IsSavingCount">
                                <span class="spinner-border spinner-border-sm" style="display: @(IsSavingCount ? "inline-block" : "none");" role="status" aria-hidden="true"></span>
                                Save
                            </button>
                        </div>
                    </div>

                    <div class="input-group mb-3">
                        <div class="input-group-prepend">
                            <span class="input-group-text" id="basic-addon3">Last retry date</span>
                        </div>
                        <input type="datetime-local" class="form-control" id="dateValue" aria-describedby="basic-addon3" @bind="LastDate">
                        <div class="input-group-append" id="button-addon4">
                            <button class="btn btn-primary" style="float: right; white-space: nowrap;" type="button" @onclick="SaveDate" disabled="@IsSavingDate">
                                <span class="spinner-border spinner-border-sm" style="display: @(IsSavingDate ? "inline-block" : "none");" role="status" aria-hidden="true"></span>
                                Save
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </MudItem>
    </MudGrid>
}

@code {
    private RetryDataViewModel _data;
    private MudAutocomplete<ParamValue> _userList;
    private ParamValue User { get; set; }
    private int Count { get; set; }
    private DateTime? LastDate { get; set; }

    private bool IsSavingCount { get; set; } = false;
    private bool IsSavingDate { get; set; } = false;
    private bool IsRefreshing { get; set; } = false;

    private async Task Filter(ParamValue user)
    {
        User = user;

        if (_userList.IsOpen)
            await _userList.ToggleMenu();

        if (user == null)
        {
            _data = null;
            return;
        }

        IsRefreshing = true;

        _data = await _retryService.GetData(User.Param);
        Count = _data.Count;
        LastDate = _data.LastDate;

        IsRefreshing = false;
    }

    private async Task SaveCount()
    {
        IsSavingCount = true;

        _data = await _retryService.SetCount(User.Param, Count);
        Count = _data.Count;
        LastDate = _data.LastDate;

        IsSavingCount = false;
    }

    private async Task SaveDate()
    {
        IsSavingDate = true;

        _data = await _retryService.SetDate(User.Param, LastDate);
        Count = _data.Count;
        LastDate = _data.LastDate;

        IsSavingDate = false;
    }

    private async Task<IEnumerable<ParamValue>> GetUsers(string text) => text.IsNullOrWhiteSpace()
        ? Array.Empty<ParamValue>()
        : await _userResolver.GetUsers(text);
}